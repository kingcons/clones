* Clones Tasks
*** Implement ROM parsing, returning a plist
**** DONE Function parse-rom (pathname) -> plist of attributes
**** DONE Add pathname as an attribute in parse-rom output
**** DONE Finish tests for parse-rom
**** DONE Write docs for exported symbols in ROM module
*** Implement mapper class, then nrom support
**** DONE mapper interface -> get-prg, set-prg, get-chr, set-chr, load-rom
**** DONE add nice docs for mapper module
**** add a pretty printer for mappers?
*** Implement Disassembler
**** DONE Add a nice instruction reference
**** DONE Add a simple memory interface fetch/store, just RAM and mapper for now, 0s if doing other I/O
**** DONE Write tests for the memory interface
**** DONE Add opcode-data
**** DONE Build opcode table from instruction-data. Can this be shared with CPU? array of opcode structs
***** Opcodes: name, access pattern, code, bytes, cycles, addressing mode. Skip docs?
***** Access pattern: static/jump/read/write/rmw
**** DONE Build disassembler skipping arg formatting, just hex bytes
*** Stream Warmup
**** DONE Fix unbound pathname in default mapper / nestest
**** DONE Convert uses of initform to default-initargs
**** DONE Build out a correct arg formatter for the different addressing modes. Maybe use trivia/defunion?
**** DONE Measure build-opcode-table consing. Export *opcode-table* var instead of rebuilding on demand
**** TODO Write tests for the disassembler. Adding a stream keyarg would help.
*** Implement CPU
**** DONE Add conditions for addressing-mode-not-implemented, opcode-not-implemented, opcode-not-found
**** DONE Add a CPU structure with correct default values and slots
**** DONE Add a nestest harness in clones.test.cpu
**** DONE Add a function single-step(cpu) that dispatches to an appropriate handler for the opcode
**** TODO Opcode Boss Rush!
***** Start by going over the diff from last time, big thing was added explicit errors to make the fix clear
****** https://git.sr.ht/~kingcons/clones/commit/dd3cadaf94a56bbfecd6d7cec5977e6719ddb715
***** Worth calling out that both keywords as function names and structures are antipatterns
****** https://www.reddit.com/r/lisp/comments/4tihvq/keywords_as_function_names/
****** Structs is a bit of a premature optimization but why use classes for something that isn't polymorphic?
***** Keep notes on any weird / tricky things to implement we encounter (rmw, page boundary bonus cycle, etc)
**** TODO Fix the horrific docs for *opcode-table* and/or structure constructors like make-cpu?
**** TODO Add support for working with status register in terms of status keywords like :interrupt :carry etc

* External dependencies
** DONE Add support for sourcehut URIs to mgl-pax?
