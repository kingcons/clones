* Clones Tasks
*** DONE Implement ROM parsing, returning a plist
**** DONE Function parse-rom (pathname) -> plist of attributes
**** DONE Add pathname as an attribute in parse-rom output
**** DONE Finish tests for parse-rom
**** DONE Write docs for exported symbols in ROM module
*** DONE Implement mapper class, then nrom support
**** DONE mapper interface -> get-prg, set-prg, get-chr, set-chr, load-rom
**** DONE add nice docs for mapper module
*** DONE Implement Disassembler
**** DONE Add a nice instruction reference
**** DONE Add a simple memory interface fetch/store, just RAM and mapper for now, 0s if doing other I/O
**** DONE Write tests for the memory interface
**** DONE Add opcode-data
**** DONE Build opcode table from instruction-data. Can this be shared with CPU? array of opcode structs
**** DONE Build disassembler skipping arg formatting, just hex bytes
*** DONE Stream Warmup
**** DONE Fix unbound pathname in default mapper / nestest
**** DONE Convert uses of initform to default-initargs
**** DONE Build out a correct arg formatter for the different addressing modes. Maybe use trivia/defunion?
**** DONE Measure build-opcode-table consing. Export *opcode-table* var instead of rebuilding on demand
*** DONE Struct -> Class cleanups
**** DONE Update Memory
**** DONE Update CPU
**** Keep Opcodes as structs
***** Opcodes are the most "struct-like" thing of the bunch. Dumb read only record only used for metadata.
***** Fine with not updating them provided I can find a way to better describe the data structure in MGL-PAX.
**** DONE Update PPU
*** Implement CPU
**** DONE Add conditions for addressing-mode-not-implemented, opcode-not-implemented, opcode-not-found
**** DONE Add a CPU structure with correct default values and slots
**** DONE Add a nestest harness in clones.test.cpu
**** DONE Add a function single-step(cpu) that dispatches to an appropriate handler for the opcode
**** DONE Opcode Boss Rush!
***** Start by going over the diff from last time, big thing was added explicit errors to make the fix clear
****** https://git.sr.ht/~kingcons/clones/commit/dd3cadaf94a56bbfecd6d7cec5977e6719ddb715
***** Worth calling out that both keywords as function names and structures are antipatterns
****** https://www.reddit.com/r/lisp/comments/4tihvq/keywords_as_function_names/
****** Simple REPL tests suggest (funcall (find-symbol "X")) is 10x slower than (funcall 'x).
****** Dispatching 1M opcodes the latter way takes ~15M host CPU cycles on my machine, ~160-170M for former.
****** On my MBP, that's still only ~0.05 seconds for "find-symbol" dispatch so could be okay to try later.
****** Structs could be a premature optimization but why use classes for something that isn't polymorphic?
***** Keep notes on any weird / tricky things to implement we encounter (rmw, page boundary bonus cycle, etc)
***** Does it make a difference to use ASH/+ to combine bytes into an address vs DPB?
***** No difference. SHL ADD MOV vs SHL OR MOV.
***** What's the difference between DPB and DEPOSIT-FIELD?
***** Difference is bit significance, see: https://www.cs.cmu.edu/Groups/AI/html/cltl/clm/node132.html
**** DONE Rewrite SET-FLAG-ZN to not hurt my soul.
***** Probably a SET-FLAG helper macro is the way. dpb ,value (byte 1 ,flag-index) (cpu-status ,cpu)
***** SET-FLAG-IF is tempting but less general / no improvement on (set-flag cpu :carry (if (zerop x) 1 0))
***** Rewrite status locations to reference the helper. Maybe add a STATUS? helper for branch-if.
***** To update: SEC/CLC and friends, BIT, BCC/BCS and friends, SET-FLAG-ZN
**** DONE Opcode Boss Rush Pt. 2!
**** DONE Opcode Boss Rush Pt. 3!
**** DONE Rewrite all stack interactions. Stack is 0x100 -> 0x1FF but I was treating it as zero page.
**** DONE Need an update strategy for read-modify-write commands. :-(
***** Not very tough if we're willing to allocate a list or closure in GET-OPERAND.
***** May want to pass the mode as an argument to these instructions and push logic inside later to avoid alloc.
**** DONE Factor out FETCH-WORD from absolute addressing.
**** DONE Remove errors like ADDRESSING-MODE-NOT-IMPLEMENTED, ACCESS-PATTERN-NOT-IMPLEMENTED, OPCODE-NOT-IMPLEMENTED.
**** DONE Consider adding fetch-indirect and/or cleaning up page wrapping weirdness with indirect addressing.
**** DONE Add a test case for relative addressing that would strain the LDA PPUSTATUS; BPL &FB trick.
**** TODO May want a helper for grabbing an individual bit value from status reg. (Probably use LDB/MASK-FIELD)
**** TODO Handling of the :unused status bit is wonky in PHP.
***** I.e. Should be doing it on PLP side probably since PHA could put a value on the stack for RTI.
**** TODO Rewrite OVERFLOW? (and ADC/SBC) after working out the subtraction behavior of overflow in detail.
*** Implement PPU
**** DONE Scaffold PPU module
**** DONE Add support for NMI
**** TODO Add support for DMA
**** DONE Support combining tile bytes in the pattern table
**** TODO Get PPU Registers working
***** DONE Find docs + Write tests
***** DONE Finish bulk of PPU register behavior (ppu read buffer)
***** TODO Add tests for PPUSTATUS sprite bits when sprite evaluation is finished
***** TODO If a value larger than 0x3FFF is written to PPUADDR, we should mirror down
***** TODO Be consistent. Is it NAMETABLE or NAME-TABLE?
**** DONE Add PPU Timing tests
**** DONE Add fetching code for Nametable byte, Attribute byte, Pattern bytes
**** DONE Compute palette indices from fetched bytes
**** TODO Uncover why NMI is not happening on every frame
**** TODO Support fetching two tiles at a time to support fine x scrolling
***** See: https://www.nesdev.org/wiki/PPU_rendering#Preface
*** Implement Rendering algorithm
**** DONE Add a renderer object that tracks scanline, framebuffer, ppu, on_nmi callback
**** DONE Add a sync method (or similar) that operates on renderer
**** DONE Add a framebuffer to the renderer
**** TODO Add a toplevel STEP-FRAME driver in clones.lisp
**** TODO What do we test?
**** TODO Add a way to change cartridge loaded after initializing nintendo
**** TODO Add an option to render to an SDL/OpenGL window
*** Implement Nametable rendering
**** TODO Add a RENDER-NAMETABLE method that takes an address
***** Loop for 32x30 tiles calling render-tile
***** Fetch pattern bytes, attribute byte, quad => compute palette indexes
***** Use indexes to place pixels for current tile+scanline into framebuffer
**** TODO Add a way to draw framebuffer to a file (maybe with cl-png)
*** TODO Implement Input handling
*** WAIT Explore Raylib
**** TODO Create bindings for raygui so I can use simple widgets and windowing tools
**** TODO Wire up a disassembler and CPU single stepping
*** Implement SDL2 debugger
**** TODO See how much of a pain it is to have a single stepping debugger UI in raw SDL2
*** Docs and Tests
**** DONE Update doc generation to link to code on sourcehut
**** TODO Get Klaus functional tests built for NES and wire up in test
**** TODO Add tests for disassembler
**** TODO Add narrative docs for ROM
**** TODO Add narrative docs for Mappers
**** TODO Add narrative docs for Memory


* External dependencies
** DONE Add support for sourcehut URIs to mgl-pax?

* Weird issues
** Hit a confusing disassembler bug because of a missing ' after the , in a format string. Eg. ~2,'0X
** Stack grows downward on the 6502 lol (encountered during :JSR) ðŸ™ƒ
*** Hit this _TWICE_ also. Following stack discipline by hand sucks, added STACK-PUSH-WORD, STACK-POP-WORD.
*** This was extra confusing because we ran into the issues while in RTS not during the JSR.
*** The return address was getting mangled and it took adding explicit byte printouts on both sides to fix.
** Relative instruction cycle counting is weird and based on if you cross a page to get to new PC
*** Hit this _TWICE_ which was even more confusing. TL;DR: You don't pay the toll unless you take the branch!
** PLA was super confusing because bit 5 became unset and never should be unset.
*** Even more confusing, the 6502 doc I have says it should never be unset but nestest log says otherwise.
** Overflow handling is always confusing
*** I struggle to think about twos complement representation in addition to unsigned values
*** Looking at past projects I've used quite unsatisfying solutions in the subtraction case.
** Carry bit having different meanings when adding or subtracting led to some confusion.
** Didn't write dedicated stack helpers and then was confused when stack pointer and zero page overlapped.
*** I.e. Had to debug absolute loading from stack which didn't show the right data.
** RTI and RTS both need to make minor off by one adjustments to their address to behave properly.
*** JSR winds up accounting for this by adding PC+2 instead of PC+3 to the stack.
*** RTI currently subtracts one from it's return address since they are pushed in tests by LDA/PHA.
*** In both cases it's because they aren't :access-pattern :jump. Logically, it feels like they should be.
** Forgot that stack ops invert. I.e. If stack-push does store/decf stack, stack-pop should incf/fetch
** Relative addressing passed all tests but was definitely still wrong. BPL &FB was the test case.
*** I.e. Waiting on a PPU frame render did not behave as intended. At all.
** Extremely painful bug from NMI pushing status then PC instead of other way around.
*** Why the hell isn't the NMI page on nesdev more clear about this? Working backwards from RTI would have been better.
** Tricky scroll issue where after each tile we incremented local var instead of actual PPUADDR.
** Forgot to multiply by three when computing framebuffer offset (for each RGB byte in a pixel)

* Cl-raylib notes
** Easy fix to load even though it isn't on my path:

```
(let* ((raylib-path "/home/cons/projects/clones/raylib/build/raylib/")
       (cffi:*foreign-library-directories* (list raylib-path)))
  (ql:quickload :cl-raylib))
```
